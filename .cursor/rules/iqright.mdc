---
description: 
globs: 
alwaysApply: true
---

# Your rule content
You are an expert in Python, Flask, and scalable API development.  

Key Principles 
- Write concise, technical responses with accurate Python examples. 
- Use functional, declarative programming; avoid classes where possible except for Flask views. 
- Prefer iteration and modularization over code duplication. 
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission). 
- Use lowercase with underscores for directories and files (e.g., blueprints/user_routes.py). 
- Favor named exports for routes and utility functions. 
- Use the Receive an Object, Return an Object (RORO) pattern where applicable.  Python/Flask 
- Use def for function definitions. 
- Use type hints for all function signatures where possible. 
- File structure: Flask app initialization, blueprints, models, utilities, config. 
- Avoid unnecessary curly braces in conditional statements. 
- For single-line statements in conditionals, omit curly braces. 

Project Structure
The project is meant to be deployed on a Raspberry Pi and is split in two parts:
1) The local web server running mqtt_grid_web.py as follows:
- The project is a Flask application meant to be deployed Locally.
- Isolation of the users is important and the integration with Paho MQTT is fundamental.
- Every user has a unique ID and a name and the login is done with user and password
- The project is a web application with microservices architecture.
- The project is a Flask-RESTful API.
- The project does not use a database, all the data is stored in the local file system.
- The project uses the Paho MQTT client library for communication with the MQTT broker.
- The project uses the Google Cloud Secret Manager client library for managing the secrets.
- The project uses the Pandas library for data manipulation and analysis.
- The web app should allow audio output
- The web app uses SocketIO for communication with the local server and refresh the info in real time
- The web app should have a nice UI/UX and be as simple as possible
- The web app basically have only one page, all the others are related to user authentication and authorization
- The web app should have a nice error handling

2) A local service running capture_lora.py as follows:
- The service is a Python script that capture the data from the LoRaWAN module and send it to the specific MQTT topic
- The service uses the Paho MQTT client library for communication with the MQTT broker.
- The service uses the Google Cloud Secret Manager client library for managing the secrets.
- The service uses the Pandas library for data manipulation and analysis.
- The service is a local service and it is not accessible from the web app
- The service is responsible for the capture of the data from the LoRaWAN module and enrich it with the data from the local files
- The service is responsible for the detection of the presence of a car in the parking lot

Error Handling and Validation - Prioritize error handling and edge cases: 
- Handle errors and edge cases at the beginning of functions. 
- Use early returns for error conditions to avoid deeply nested if statements. 
- Place the happy path last in the function for improved readability. 
- Avoid unnecessary else statements; use the if-return pattern instead. 
- Use guard clauses to handle preconditions and invalid states early. 
- Implement proper error logging and user-friendly error messages. 
- Use custom error types or error factories for consistent error handling.  

Dependencies 
- Flask 
- Flask-RESTful (for RESTful API development) 
- Flask-SQLAlchemy (for ORM) 
- Flask-Migrate (for database migrations) 
- Marshmallow (for serialization/deserialization) 
- Flask-JWT-Extended (for JWT authentication)  
- Google Cloud Secret Manager client library (for secret management)
- Paho-MQTT client library (for MQTT communication)
- Pandas (for data manipulation and analysis)
- Pytest (for testing)
- Pytest-cov (for test coverage)
- Pytest-mock (for mocking)
- Pytest-asyncio (for async testing)


Flask-Specific Guidelines 
- Use Flask application factories for better modularity and testing. 
- Organize routes using Flask Blueprints for better code organization. 
- Use Flask-RESTful for building RESTful APIs with class-based views. 
- Implement custom error handlers for different types of exceptions. 
- Use Flask's before_request, after_request, and teardown_request decorators for request lifecycle management. 
- Utilize Flask extensions for common functionalities (e.g., Flask-SQLAlchemy, Flask-Migrate). 
- Implement proper logging using Flask's app.logger. 
- Use Flask-JWT-Extended for handling authentication and authorization.  
- Use Pandas to handle offline data processing and data manipulation.
- All data processing should be done offline and the results should be saved to a file.
- All files stored locally should be encrypted at rest.

Performance Optimization 
- Use Flask-Caching for caching frequently accessed data. 
- Implement database query optimization techniques (e.g., eager loading, indexing). 
- Use connection pooling for database connections. 
- Implement proper database session management. 
- Use background tasks for time-consuming operations (e.g., Celery with Flask).  

Key Conventions
 1. Use Flask's application context and request context appropriately. 
 2. Prioritize API performance metrics (response time, latency, throughput). 
 3. Structure the application: - Use blueprints for modularizing the application. 
    - Implement a clear separation of concerns (routes, business logic, data access). 
    - Use environment variables for configuration management.  
    - Use Marshmallow for object serialization/deserialization and input validation. 
    - Create schema classes for each model to handle serialization consistently.  
4. Secrets are stored in Google Cloud Secret Manager and are loaded into the application using the Secret Manager client library.
    
Authentication and Authorization 
- Implement JWT-based authentication using Flask-JWT-Extended. 
- Use decorators for protecting routes that require authentication.  

Testing 
- Write unit tests using pytest. - Use Flask's test client for integration testing. 
- Implement test fixtures for database and application setup.  API Documentation - Use Flask-RESTX or Flasgger for Swagger/OpenAPI documentation. 
- Ensure all endpoints are properly documented with request/response schemas.  Deployment - Use Gunicorn or uWSGI as WSGI HTTP Server. 
- Implement proper logging and monitoring in production. 
- Use environment variables for sensitive information and configuration.  Refer to Flask documentation for detailed information on Views, Blueprints, and Extensions for best practices. 



